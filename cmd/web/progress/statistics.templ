package web_tracking

import (
	"time"
	"fmt"
	"github.com/FilipBudzynski/book_it/internal/models"
)

func Today() time.Time {
	now := time.Now()
	return time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, time.UTC)
}

css progressBar(percent int) {
	--value: { fmt.Sprintf("%d", percent) };
}

templ ProgressStatistics(readingProgress *models.ReadingProgress) {
	<div class="flex-grow place-items-center relative mb-10">
		<div class="flex flex-col items-center mx-10 md:mx-20">
			<div class="breadcrumbs text-lg">
				<ul>
					<li><a>Tracking</a></li>
					<li><a>{ readingProgress.BookTitle }</a></li>
				</ul>
			</div>
		</div>
		<!-- Tracking -->
		<div class="pb-6">
			<div class="stats shadow bg-base-100">
				<div class="stat">
					<div class="stat-figure text-primary">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							class="inline-block h-8 w-8 stroke-current"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
							></path>
						</svg>
					</div>
					<div class="stat-title">Days Left</div>
					<div class="stat-value text-primary">{ fmt.Sprintf("%d",  max(0, readingProgress.DaysLeft(time.Now()) + 1)) }</div>
					<div class="stat-desc">{ "Started at: " + readingProgress.StartDate.Format("2006-01-02") }</div>
				</div>
				<!-- todays goal -->
				<div class="stat">
					<div class="stat-figure text-secondary">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							class="inline-block h-8 w-8 stroke-current"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M13 10V3L4 14h7v7l9-11h-7z"
							></path>
						</svg>
					</div>
					<div class="stat-title">Daily Goal</div>
					<div class="stat-value text-secondary">{ fmt.Sprintf("%d", readingProgress.DailyTargetPages) }</div>
					<div class="stat-desc">Already At: { fmt.Sprintf("%d", readingProgress.CurrentPage) } Page</div>
				</div>
				<div class="stat">
					<div class="stat-figure text-secondary"></div>
					{{ progress := fmt.Sprintf("%d", int(100*(float64(readingProgress.CurrentPage)/float64(readingProgress.TotalPages)))) }}
					<div
						class="radial-progress"
						{ templ.Attributes{"style": fmt.Sprintf("--value:%s;", progress) }... }
						aria-valuenow="80"
						role="progressbar"
					>{ progress }% </div>
					<div class="stat-title">Pages Left</div>
					<div class="stat-desc text-secondary">{ fmt.Sprintf("%d", readingProgress.TotalPages - readingProgress.CurrentPage) }</div>
				</div>
			</div>
		</div>
		<div class="flex w-full justify-evenly px-20">
			<!-- <progress class="progress progress-success w-80" value={ fmt.Sprintf("%d", int(100*(float64(readingProgress.CurrentPage)/float64(readingProgress.TotalPages)))) } max="100"></progress> -->
			<button
				hx-delete={ fmt.Sprintf("/progress/%d", readingProgress.ID) }
				hx-target="#progress-statistics"
				hx-confirm="Are you sure?"
				hx-swap="innerHTML"
				class="btn btn-sm btn-error"
			>Remove Tracking</button>
		</div>
	</div>
	<div id="progress_steps h-30">
		@DailyProgressLogs(readingProgress.DailyProgress)
	</div>
	@DailyProgressLogsTable(readingProgress.DailyProgress)
}

templ DailyProgressLogs(dailyLogs []models.DailyProgressLog) {
	<div class="flow-auto flex items-center h-30 sm:justify-start">
		<div class="w-[70rem] overflow-x-auto flex items-center justify-center">
			<ul class="steps steps-vertical sm:steps-horizontal">
				for _, dailyLog := range dailyLogs {
					@ProgressStep(dailyLog)
				}
			</ul>
		</div>
	</div>
}

templ DailyProgressLogsTable(dailyLogs []models.DailyProgressLog) {
	<div class="mb-10 flow-auto flex items-center justify-center">
		<div class="w-[40rem] flex items-center justify-center">
			<table class="bg-base-100 table table-xs z-1 ">
				<thead>
					<th>Date</th>
					<th>Pages Read</th>
					<th>Target Pages</th>
					<th>Remaining Pages</th>
				</thead>
				<tbody
					id="logs-container"
				>
					for _, dailyLog := range dailyLogs {
						@LogsTableRow(dailyLog)
					}
				</tbody>
				<tfoot></tfoot>
			</table>
		</div>
	</div>
}

templ LogsTableRow(dailyLog models.DailyProgressLog) {
	<tr>
		<td>{ dailyLog.Date.Format("2006-01-02") }</td>
		<td>{ fmt.Sprintf("%d", dailyLog.PagesRead) }</td>
		<td>{ fmt.Sprintf("%d", dailyLog.TargetPages) }</td>
		<td>{ fmt.Sprintf("%d", dailyLog.TotalPages - dailyLog.PagesRead) }</td>
	</tr>
}
