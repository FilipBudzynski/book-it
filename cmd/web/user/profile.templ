package web_user

import "fmt"
import "github.com/FilipBudzynski/book_it/internal/models"

import "github.com/FilipBudzynski/book_it/cmd/web"

templ Profile(user *models.User, genres []*models.Genre) {
	<dialog id="location_modal" class="modal modal-md">
		<div class="modal-box" id="htmx_modal"></div>
	</dialog>
	<div class="max-w-screen-lg mx-auto items-start flex flex-col">
		<div class="breadcrumbs text-lg">
			<ul>
				<li>My Profile</li>
			</ul>
		</div>
		<!-- genres picker -->
		<article class="prose">
			<h1>Subjects that interest you</h1>
		</article>
		<div class="justify-center w-full ">
			<div class="flex flex-col items-center ">
				<div class="grid grid-cols-2 w-full items-start justify-between py-5 gap-6 ">
					<!-- genres -->
					<div class="felx justify-items-center">
						<div class="flex flex-wrap gap-2 justify-start">
							for _, genre := range genres {
								@GenreButton(genre, user.ContainsGenre(genre.Name))
							}
						</div>
					</div>
					<!-- user info -->
					<div class="flex flex-wrap gap-2 justify-start">
						<div class="p-4 btn btn-neutral" disabled="disabled">
							{ user.Username }
						</div>
						<div class="avatar">
							<div class="w-32 rounded-full">
								<img src={ user.AvatarURL }/>
							</div>
						</div>
						<div class="p-4 btn btn-neutral" disabled="disabled">
							{ user.Email }
						</div>
						if user.Location != nil {
							<div class="p-4 btn btn-neutral">
                                Change Default Location
							</div>
							<div class="p-4 btn btn-neutral" disabled="disabled">
								{ user.Location.Formatted }
							</div>
						} else {
							<div
								class="p-4 btn btn-neutral"
								hx-get="/users/profile/location/modal"
								hx-push-url="true"
								hx-swap="innerHTML"
								hx-target="#htmx_modal"
								hx-trigerr="click"
								onclick="location_modal.showModal()"
								class="btn btn-neutral btn-outline"
							>
								Default Location
							</div>
						}
						<div class="p-4 btn btn-neutral" hx-delete="/users" hx-confirm="Are you sure you want to delete the account?">
							Remove Account
						</div>
					</div>
				</div>
			</div>
		</div>
		<article class="prose mt-4">
			<h1>What to read?</h1>
			<span>Based on your preferences and reading history we recommend books that you might enjoy.</span>
		</article>
		@web.LoadingBooks()
		<div
			class="carousel carousel-center rounded-box h-100"
			hx-get="/books/recommendations"
			hx-swap="outerHTML"
			hx-trigger="load"
			hx-indicator="#loading-books-skeleton"
		></div>
	</div>
}

templ GenreButton(genre *models.Genre, selected bool) {
	<button
		if selected {
			class="btn btn-neutral"
			hx-delete={ fmt.Sprintf("/users/profile/genres/%d", genre.ID) }
		} else {
			class="btn btn-outline btn-neutral"
			hx-post={ fmt.Sprintf("/users/profile/genres/%d", genre.ID) }
		}
		hx-swap="outerHTML"
	>
		# { genre.Name }
	</button>
}

templ UserGenres(genres []models.Genre) {
	<div>
		for _, genre := range genres {
			<a>{ genre.Name }</a>
		}
	</div>
}

templ Recommendations(books []*models.Book) {
	if len(books) == 0 {
		<article class="prose mt-4">
			<h2>Pick the subjects and get some recommendations!</h2>
		</article>
	} else {
		<div id="recommendations-container" class="flex flex-col items-center mx-10 md:mx-20 mb-10">
			<div class="carousel carousel-center rounded-box h-100">
				for _, book := range books {
					<div class="carousel-item">
						<img src={ book.ImageLink } alt="Book cover"/>
					</div>
				}
			</div>
		</div>
	}
}

// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/Science+Fiction"
// 	hx-swap="outerHTML"
// ># Sci-Fi</button>
// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/Fiction"
// 	hx-swap="outerHTML"
// ># Fiction</button>
// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/Russian-Literature"
// 	hx-swap="outerHTML"
// ># Russian Literature</button>
// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/History"
// 	hx-swap="outerHTML"
// ># History</button>
// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/Coding"
// 	hx-swap="outerHTML"
// ># Coding</button>
// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/Psychology"
// 	hx-swap="outerHTML"
// ># Psychology</button>
// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/Cooking"
// 	hx-swap="outerHTML"
// ># Cooking</button>
// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/Sports"
// 	hx-swap="outerHTML"
// ># Sports</button>
// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/Baking"
// 	hx-swap="outerHTML"
// ># Baking</button>
// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/Novels"
// 	hx-swap="outerHTML"
// ># Novels</button>
// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/Crime"
// 	hx-swap="outerHTML"
// ># Crime</button>
// <button
// 	class="btn btn-outline btn-neutral"
// 	hx-post="/users/profile/genres/Drama"
// 	hx-swap="outerHTML"
// ># Drama</button>
templ LocationModal() {
	<form
		method="dialog"
		hx-on::load="initMap()"
	>
		<button
			class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
		>âœ•</button>
	</form>
	<h3 class="text-lg font-bold">Change default location</h3>
	<div
		class="flex-row relative"
	>
		<form id="location-form">
				<!-- map -->
				<input name="latitude" id="geolocation-lat" value="" class="input hidden input-bordered mt-2"/>
				<input name="longitude" id="geolocation-lon" value="" class="input hidden input-bordered mt-2"/>
				<input name="formatted" id="geolocation-name" value="" class="input hidden input-bordered mt-2"/>
				<input
					class="input w-full mt-4"
					name="geoloc-query"
					id="geoloc"
					type="text"
					placeholder="Enter your location"
					hx-get="/exchange/localization"
					hx-trigger={ fmt.Sprintf("keyup changed delay:%dms", 300) }
					hx-target="#geoloc-results"
					hx-swap="innerHTML"
				/>
				<div
					class="relative rounded-lg"
				>
					<!-- Autocomplete Results -->
					<div
						id="geoloc-results"
						class="absolute z-50 w-full max-h-80 overflow-y-auto bg-white shadow-lg rounded-lg"
					></div>
					<!-- Map Container -->
					<div class="mt-4 rounded-lg">
						<div
							id="map"
							class="rounded-lg"
							style="width: 100%; height: 400px; z-index: 0;"
						></div>
					</div>
				</div>
				<!-- end map -->
			<!-- if there is a button in form, it will close the modal -->
			<div class="modal-action">
				<button
					class="btn"
					hx-post="/users/profile/location"
					onclick="location_modal.close()"
				>Submit</button>
			</div>
		</form>
	</div>
}
