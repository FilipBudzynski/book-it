package web_user

import "fmt"
import "github.com/FilipBudzynski/book_it/internal/models"

import "github.com/FilipBudzynski/book_it/cmd/web"

templ Profile(user *models.User, genres []*models.Genre) {
	<dialog id="location_modal" class="modal modal-md">
		<div class="modal-box" id="htmx_modal"></div>
	</dialog>
	<div class="max-w-screen-lg mx-auto items-start flex flex-col mb-10">
		<div class="breadcrumbs text-lg">
			<ul>
				<li>My Profile</li>
			</ul>
		</div>
		<!-- genres picker -->
		<article class="prose">
			<h1>Subjects that interest you</h1>
		</article>
		<div class="justify-center w-full ">
			<div class="flex flex-col items-center ">
				<div class="grid grid-cols-2 w-full items-start justify-between py-5 gap-6 ">
					<!-- genres -->
					<div class="felx h-[30rem] overflow-y-auto justify-items-center">
						<div class="flex flex-wrap gap-2 justify-start">
							for _, genre := range genres {
								@GenreButton(genre, user.HasGenre(genre.Name))
							}
						</div>
					</div>
					<!-- user info -->
					<div class="flex flex-wrap gap-2 justify-start">
						<div class="p-4 btn btn-neutral" disabled="disabled">
							{ user.Username }
						</div>
						<div class="avatar">
							<div class="w-32 rounded-full">
								<img src={ user.AvatarURL }/>
							</div>
						</div>
						<div class="p-4 btn btn-neutral" disabled="disabled">
							{ user.Email }
						</div>
						<div
							class="p-4 btn btn-neutral"
							hx-get="/users/profile/location/modal"
							hx-swap="innerHTML"
							hx-target="#htmx_modal"
							hx-trigerr="click"
							onclick="location_modal.showModal()"
							class="btn btn-neutral btn-outline"
						>
							if user.Location == nil {
								Set Default Location
							} else {
								Change Default Location
							}
						</div>
						if user.Location != nil {
							<div class="p-4 btn btn-neutral" disabled="disabled">
								{ user.Location.Formatted }
							</div>
						}
						<div class="p-4 btn btn-neutral" hx-delete="/users" hx-confirm="Are you sure you want to delete the account?">
							Remove Account
						</div>
					</div>
				</div>
			</div>
		</div>
		<article class="prose mt-4">
			<h1>What to read?</h1>
			<span>Based on your preferences and reading history we recommend books that you might enjoy.</span>
		</article>
		@web.LoadingBooks()
		<div
			class="carousel carousel-center rounded-box h-300"
			hx-get="/books/recommendations"
			hx-swap="outerHTML"
			hx-trigger="load"
			hx-indicator="#loading-books-skeleton"
		></div>
	</div>
}

templ GenreButton(genre *models.Genre, selected bool) {
	<button
		if selected {
			class="btn btn-neutral"
			hx-delete={ fmt.Sprintf("/users/profile/genres/%d", genre.ID) }
		} else {
			class="btn btn-outline btn-neutral"
			hx-post={ fmt.Sprintf("/users/profile/genres/%d", genre.ID) }
		}
		hx-swap="outerHTML"
	>
		# { genre.Name }
	</button>
}

templ UserGenres(genres []models.Genre) {
	<div>
		for _, genre := range genres {
			<a>{ genre.Name }</a>
		}
	</div>
}

templ Recommendations(books []*models.Book) {
	if len(books) == 0 {
		<article class="prose mt-4">
			<h2>Pick the subjects and get some recommendations!</h2>
		</article>
	} else {
		<div id="recommendations-container" class="flex items-center w-full overflow-x-auto rounded-box">
			<div class="carousel carousel-center rounded-box h-250">
				for _, book := range books {
					<div class="carousel-item px-2 transition-opacity duration-300">
						<div class="felx flex-col flex-wrap">
							<img src={ book.ImageLink } alt="Book cover" class="h-[250px] w-[162px] object-cover shadow-xl"/>
							<div
								hx-post={ fmt.Sprintf("/user-books/%s", book.ID) }
								hx-trigger="click"
								hx-swap="none"
								class="btn w-full btn-neutral btn-outline mt-2"
								_="on click add .opacity-0 to closest .carousel-item then wait 350ms then remove closest .carousel-item"
							>
								+ Add Book
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	}
}

templ LocationModal(user *models.User) {
	<form
		method="dialog"
		hx-on::load="initMap()"
	>
		<button
			class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
		>âœ•</button>
	</form>
	<h3 class="text-lg font-bold">Change default location</h3>
	<div
		class="flex-row relative"
	>
		<form id="location-form">
			<!-- map -->
			<input
				name="latitude"
				id="geolocation-lat"
				if user.Location != nil {
					value={ fmt.Sprintf("%f", user.Location.Latitude) }
				} else {
					value=""
				}
				class="input hidden input-bordered mt-2"
			/>
			<input
				name="longitude"
				id="geolocation-lon"
				if user.Location != nil {
					value={ fmt.Sprintf("%f", user.Location.Longitude) }
				} else {
					value=""
				}
				class="input hidden input-bordered mt-2"
			/>
			<input
				name="formatted"
				id="geolocation-name"
				value=""
				class="input hidden input-bordered mt-2"
			/>
			<input
				class="input w-full mt-4"
				name="geoloc-query"
				id="geoloc"
				type="text"
				placeholder="Enter your location"
				hx-get="/exchange/localization"
				hx-trigger={ fmt.Sprintf("keyup changed delay:%dms", 300) }
				hx-target="#geoloc-results"
				hx-swap="innerHTML"
				if user.Location != nil {
					value={ user.Location.Formatted }
				}
			/>
			<div
				class="relative rounded-lg"
			>
				<!-- Autocomplete Results -->
				<div
					id="geoloc-results"
					class="absolute z-50 w-full max-h-80 overflow-y-auto bg-white shadow-lg rounded-lg"
				></div>
				<!-- Map Container -->
				<div class="mt-4 rounded-lg">
					<div
						id="map"
						class="rounded-lg"
						style="width: 100%; height: 400px; z-index: 0;"
					></div>
				</div>
			</div>
			<!-- end map -->
			<!-- if there is a button in form, it will close the modal -->
			<div class="modal-action">
				<button
					class="btn"
					hx-post="/users/profile/location"
					onclick="location_modal.close()"
				>Submit</button>
			</div>
		</form>
	</div>
}
