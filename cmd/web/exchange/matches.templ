package web_exchange

import (
	"fmt"
	"github.com/FilipBudzynski/book_it/internal/models"
)

var EmailMessage = func(email, bookTitle string) string {
	return fmt.Sprintf("https://mail.google.com/mail/?view=cm&fs=1&to=%s&su=SUBJECT&body=BODY", email)
}
var MatchExchangeID = func(matchID uint) string {
	return fmt.Sprintf("match-exchange-%d", matchID)
}

templ Matches(matches []*models.ExchangeMatch, request *models.ExchangeRequest) {
	for _, match := range matches {
		@MatchDiv(match, request)
	}
	<!-- <div class="htmx-added:opacity-0 transition-opacity duration-300 flex justify-center w-full mb-10"> -->
	<!-- 	if len(matches) == 0 { -->
	<!-- 		<h1 class="text-3xl">No matches found</h1> -->
	<!-- 	} else { -->
	<!-- 		<table class="bg-base-100 table table-md z-1 "> -->
	<!-- 			<thead> -->
	<!-- 				<th>Your book for exchange </th> -->
	<!-- 				<th>Title</th> -->
	<!-- 				<th>Status</th> -->
	<!-- 				<th>Distance</th> -->
	<!-- 				<th>Get Connected</th> -->
	<!-- 				<th>Action</th> -->
	<!-- 			</thead> -->
	<!-- 			<tbody -->
	<!-- 				id="matched-exchanges" -->
	<!-- 			> -->
	<!-- 				for _, match := range matches { -->
	<!-- 					@MatchTableRow(match, request) -->
	<!-- 				} -->
	<!-- 			</tbody> -->
	<!-- 			<tfoot></tfoot> -->
	<!-- 		</table> -->
	<!-- 	} -->
	<!-- </div> -->
	<div id="exchange-details-status" hx-swap-oob="true">
		@StatusDiv(request.Status)
	</div>
}

templ MatchDiv(match *models.ExchangeMatch, request *models.ExchangeRequest) {
	{{ matchedReq := match.MatchedRequest(request.ID) }}
	<div id={ MatchExchangeID(match.ID) } class="flex flex-row w-full my-4 bg-base-100 p-4 rounded-lg shadow-lg">
		<!-- Book Image -->
		<div class="h-30 w-27 rounded-lg">
			<img src={ matchedReq.DesiredBook.ImageLink } alt="img"/>
		</div>
		<!-- Content -->
		<div class="flex flex-col justify-between w-full">
			<!-- Top Section -->
			<div class="flex flex-row justify-between items-start">
				<!-- Title -->
				<div class="flex flex-col px-4 gap-2">
					<article class="prose">
						<h3>{ matchedReq.DesiredBook.Title }</h3>
					</article>
					<!-- Status -->
					@StatusDiv(match.Status)
				</div>
				<!-- Gmail Object -->
				<div
					class="w-fit bg-base-100 shadow-md p-4 rounded-md flex flex-row items-center gap-2 bg-white self-start"
					href={ EmailMessage(matchedReq.UserEmail, matchedReq.DesiredBook.Title) }
				>
					<img
						class="w-6 h-6"
						src="https://www.svgrepo.com/show/475656/google-color.svg"
						loading="lazy"
						alt="google logo"
					/>
					<span>{ matchedReq.UserEmail }</span>
					<div
						class="tooltip tooltip-top tooltip-neutral [justify-self:right] self-start"
						data-tip="copy"
						_="on click
                            writeText(my previousElementSibling's innerText) on navigator.clipboard
                            put 'copied!' into my[@data-tip]
                            wait 2s
                            put 'copy' into my[@data-tip]"
					>
						<button class="btn btn-square btn-sm" aria-label="Copy to clipboard">
							<svg class="h-5 w-5 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path d="M 16 3 C 14.742188 3 13.847656 3.890625 13.40625 5 L 6 5 L 6 28 L 26 28 L 26 5 L 18.59375 5 C 18.152344 3.890625 17.257813 3 16 3 Z M 16 5 C 16.554688 5 17 5.445313 17 6 L 17 7 L 20 7 L 20 9 L 12 9 L 12 7 L 15 7 L 15 6 C 15 5.445313 15.445313 5 16 5 Z M 8 7 L 10 7 L 10 11 L 22 11 L 22 7 L 24 7 L 24 26 L 8 26 Z"></path></svg><!---->
						</button>
					</div>
				</div>
			</div>
			<!-- Distance -->
			<div class="flex flex-row justify-between items-end px-4">
				<div class="opacity-50 text-sm">
					Distance: { fmt.Sprintf("%.2f km", match.Distance) }
				</div>
				switch match.GetDecision(request.ID) {
					case models.MatchDecisionAccepted:
						<div class="scale-150 pl-10">✅</div>
					case models.MatchDecisionDeclined:
						<div class="scale-150 pl-10">❌</div>
					default:
						<div class="flex flex-row gap-2">
							<div
								hx-target={ "#" + MatchExchangeID(match.ID) }
								hx-swap="outerHTML"
								hx-confirm="Do you wish to accept the exchange?"
								hx-post={ fmt.Sprintf("/exchange/accept/%d/%d", match.ID, request.ID) }
								class="btn btn-success btn-outline"
							>
								Accept
							</div>
							<a
								hx-target={ "#" + MatchExchangeID(match.ID) }
								hx-swap="outerHTML"
								hx-confirm="Do you wish to decline the exchange?"
								hx-post={ fmt.Sprintf("/exchange/decline/%d/%d", match.ID, request.ID) }
								class="btn btn-neutral btn-outline"
							>Decline</a>
						</div>
				}
			</div>
		</div>
	</div>
}

templ MatchTableRow(match *models.ExchangeMatch, request *models.ExchangeRequest) {
	{{ matchedReq := match.MatchedRequest(request.ID) }}
	<tr id={ MatchExchangeID(match.ID) }>
		<td class="w-auto px-3 py-2">
			<div class="flex items-center gap-3">
				<div class="avatar">
					<div class="h-30 w-20 rounded-lg">
						<img src={ matchedReq.DesiredBook.ImageLink } alt="img"/>
					</div>
				</div>
			</div>
			<a href="" class="hover:text-black">{ matchedReq.DesiredBook.Title } </a>
		</td>
		<td class="w-max px-3 py-2">
			<div class="flex flex-col">
				<span class="text-base">
					<a href="" class="transition ease-out opacity delay-150 hover:text-black">{ matchedReq.DesiredBook.Title } </a>
				</span>
				<span class="text-sm text-gray-300">
					by 
					{ matchedReq.DesiredBook.Authors }
				</span>
			</div>
		</td>
		<td>
			@StatusDiv(match.Status)
		</td>
		<td>
			<div>{ fmt.Sprintf("%.2f", match.Distance) } km</div>
		</td>
		<td>
			<div
				class="btn"
				href={ EmailMessage(matchedReq.UserEmail, matchedReq.DesiredBook.Title) }
			>
				<img class="w-6 h-6" src="https://www.svgrepo.com/show/475656/google-color.svg" loading="lazy" alt="google logo"/>
				{ matchedReq.UserEmail }
			</div>
		</td>
		<td class="w-1/5 px-3 py-2">
			switch match.GetDecision(request.ID) {
				case models.MatchDecisionAccepted:
					<div class="scale-150 pl-10">✅</div>
				case models.MatchDecisionDeclined:
					<div class="scale-150 pl-10">❌</div>
				default:
					<div class="join">
						<div
							hx-target={ "#" + MatchExchangeID(match.ID) }
							hx-swap="outerHTML"
							hx-confirm="Do you wish to accept the exchange?"
							hx-post={ fmt.Sprintf("/exchange/accept/%d/%d", match.ID, request.ID) }
							class="btn btn-success btn-outline join-item"
						>
							Accept
						</div>
						<a
							hx-target={ "#" + MatchExchangeID(match.ID) }
							hx-swap="outerHTML"
							hx-confirm="Do you wish to decline the exchange?"
							hx-post={ fmt.Sprintf("/exchange/decline/%d/%d", match.ID, request.ID) }
							class="btn btn-neutral btn-outline join-item"
						>Decline</a>
					</div>
			}
		</td>
	</tr>
}

// <div class="dropdown">
// 	<div tabindex="0" role="button" class="btn m-1">action</div>
// 	<ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] w-52 p-2 shadow">
// 		<li>
// 			<a
// 				hx-target={ "#" + MatchExchangeID(match.ID) }
//                          hx-swap="outerHTML"
// 				hx-post={ fmt.Sprintf("/exchange/accept/%d/%d", match.ID, request.ID) }
// 			>
// 				Accept
// 			</a>
// 		</li>
// 		<li>
// 			<a
// 				hx-target={ "#" + MatchExchangeID(match.ID) }
//                          hx-swap="outerHTML"
// 				hx-post={ fmt.Sprintf("/exchange/decline/%d/%d", match.ID, request.ID) }
// 			>Decline</a>
// 		</li>
// 	</ul>
// </div>
