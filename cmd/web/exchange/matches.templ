package web_exchange

import (
	"fmt"
	"github.com/FilipBudzynski/book_it/internal/models"
)

var MatchExchangeID = func(matchID uint) string {
	return fmt.Sprintf("match-exchange-%d", matchID)
}

templ Matches(matches []*models.ExchangeMatch, request *models.ExchangeRequest) {
	if len(matches) == 0 {
		<h2 class="text-center mb-10">No matches found</h2>
	}
	for _, match := range matches {
		@MatchDiv(match, request)
	}
	<div id="exchange-details-status" hx-swap-oob="true">
		@StatusDiv(request.Status)
	</div>
}

templ MatchDiv(match *models.ExchangeMatch, request *models.ExchangeRequest) {
	{{ matchedReq := match.MatchedRequest(request.ID) }}
	<div id={ MatchExchangeID(match.ID) } class="flex w-full my-4 bg-base-100 p-4 rounded-xl shadow-lg">
		<img src={ matchedReq.DesiredBook.ImageLink } alt="img" class="h-[150px] w-[106px] object-cover"/>
		<div class="flex flex-col justify-between w-full">
			<div class="flex flex-row justify-between items-start">
				<div class="flex flex-col px-4 gap-2">
					<article class="prose">
						<h3>{ matchedReq.DesiredBook.Title }</h3>
					</article>
					@StatusDiv(match.Status)
				</div>
				<!-- Gmail Object -->
				<div
					class="w-fit shadow-md p-4 rounded-lg flex flex-row items-center gap-2 bg-base-100 self-start"
				>
					<img
						class="w-6 h-6"
						src="https://www.svgrepo.com/show/475656/google-color.svg"
						loading="lazy"
						alt="google logo"
					/>
					<p>{ matchedReq.UserEmail }</p>
					<div
						class="tooltip tooltip-top tooltip-neutral [justify-self:right] self-start"
						data-tip="copy"
						_="on click
                            writeText(my previousElementSibling's innerText) on navigator.clipboard
                            put 'copied!' into my[@data-tip]
                            wait 2s
                            put 'copy' into my[@data-tip]"
					>
						<button class="btn btn-square btn-neutral btn-sm" aria-label="Copy to clipboard">
							<svg class="h-5 w-5 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path d="M 16 3 C 14.742188 3 13.847656 3.890625 13.40625 5 L 6 5 L 6 28 L 26 28 L 26 5 L 18.59375 5 C 18.152344 3.890625 17.257813 3 16 3 Z M 16 5 C 16.554688 5 17 5.445313 17 6 L 17 7 L 20 7 L 20 9 L 12 9 L 12 7 L 15 7 L 15 6 C 15 5.445313 15.445313 5 16 5 Z M 8 7 L 10 7 L 10 11 L 22 11 L 22 7 L 24 7 L 24 26 L 8 26 Z"></path></svg><!---->
						</button>
					</div>
				</div>
			</div>
			<!-- Distance -->
			<div class="flex flex-row justify-between items-end px-4">
				<div class="opacity-50 text-sm">
					Distance: { fmt.Sprintf("%.2f km", match.Distance) }
				</div>
				switch match.GetDecision(request.ID) {
					case models.MatchDecisionAccepted:
						<div class="scale-150 pl-10">✅</div>
					case models.MatchDecisionDeclined:
						<div class="scale-150 pl-10">❌</div>
					default:
						<div class="flex flex-row gap-2">
							<div
								hx-target={ "#" + MatchExchangeID(match.ID) }
								hx-swap="outerHTML"
								hx-confirm="Do you wish to accept the exchange?"
								hx-post={ fmt.Sprintf("/exchange/accept/%d/%d", match.ID, request.ID) }
								class="btn btn-success btn-outline"
							>
								Accept
							</div>
							<a
								hx-target={ "#" + MatchExchangeID(match.ID) }
								hx-swap="outerHTML"
								hx-confirm="Do you wish to decline the exchange?"
								hx-post={ fmt.Sprintf("/exchange/decline/%d/%d", match.ID, request.ID) }
								class="btn btn-neutral btn-outline"
							>Decline</a>
						</div>
				}
			</div>
		</div>
	</div>
}
