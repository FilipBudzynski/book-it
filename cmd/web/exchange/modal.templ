package web_exchange

import "github.com/FilipBudzynski/book_it/internal/models"
import "github.com/FilipBudzynski/book_it/internal/geo"
import "fmt"

const keyUpDelay = 300

templ ExchangeModal() {
	<form
		method="dialog"
		hx-on::load="initMap()"
	>
		<button
			class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
		>âœ•</button>
	</form>
	<h3 class="text-lg font-bold">New Exchange Request</h3>
	<div
		class="flex-row relative"
	>
		<form id="exchange-form">
			<div class="mb-4 grid grid-cols-2 gap-8">
				<input name="desired-book-id" id="book-id-input" class="input hidden input-bordered w-full mt-2"/>
				<div>
					<label class="block text-md font-medium text-gray-700">Desired Book</label>
					<div class="flex justify-normal mt-2">
						<input
							id="book-title"
							name="book-title"
							type="text"
							class="input w-full grow mr-2"
							placeholder="Start typing to search for books..."
							hx-get="/books/reduced/search"
							hx-trigger={ fmt.Sprintf("keyup changed delay:%dms", keyUpDelay) }
							hx-target="#book-results"
							hx-swap="innerHTML"
							_="on click 
                            set innerHTML of #book-results to '' 
                            then show #book-results"
						/>
						<div
							class="btn btn-neutral btn-outline"
							_="on click
                            set #book-id-input[@value] to '' then 
                            set #book-title's value to '' then 
                            set {disabled: false} on #book-title"
						>x</div>
					</div>
					<div
						id="book-results"
						class="absolute z-40 mt-2 w-1/2 max-h-80 overflow-y-auto shadow-lg"
					></div>
					<!-- map -->
					<input name="latitude" id="geolocaction-lat" value="" class="input hidden input-bordered w-full mt-2"/>
					<input name="longitude" id="geolocaction-lon" value="" class="input hidden input-bordered w-full mt-2"/>
					<input
						class="input w-full mt-4"
						name="geoloc-query"
						id="geoloc"
						type="text"
						placeholder="Enter your location"
						hx-get="/exchange/localization"
						hx-trigger={ fmt.Sprintf("keyup changed delay:%dms", keyUpDelay) }
						hx-target="#geoloc-results"
						hx-swap="innerHTML"
					/>
					<div
						class="relative rounded-lg"
					>
						<!-- Autocomplete Results -->
						<div
							id="geoloc-results"
							class="absolute z-50 w-full max-h-80 overflow-y-auto bg-white shadow-lg rounded-lg"
						></div>
						<!-- Map Container -->
						<div class="mt-4 rounded-lg">
							<div
								id="map"
								class="rounded-lg"
								style="width: 100%; height: 400px; z-index: 0;"
							></div>
						</div>
					</div>
					<!-- end map -->
				</div>
				<div>
					<label class="block text-md font-medium text-gray-700">Offered Books</label>
					<div
						hx-get="/user-books/exchange/books"
						hx-trigger="load"
						id="offered-books-containter"
					></div>
				</div>
			</div>
			<!-- if there is a button in form, it will close the modal -->
			<div class="modal-action">
				<button
					class="btn"
					hx-post="/exchange"
					hx-target="#exchanges-table-body"
					hx-swap="beforeend"
					onclick="exchange_modal.close()"
				>Submit</button>
			</div>
		</form>
	</div>
}

templ OfferedBooks(userBooks []*models.UserBook) {
	for i := 0; i < 5; i++ {
		<div class="flex items-center mt-2 offered_book">
			@SelectFromMyBooks(userBooks, i)
		</div>
	}
}

templ SelectFromMyBooks(userBooks []*models.UserBook, idx int) {
	<select name={ fmt.Sprintf("offered-book-%d", idx) } class="select select-bordered w-full mt-2" form="exchange-form">
		<option disabled selected>Choose book</option>
		for _, userBook := range userBooks {
			<option value={ userBook.BookID }>{ userBook.Book.Title }</option>
		}
	</select>
}

templ GeoResultsList(localizations []geo.Result) {
	<table class="bg-base-50 p-2 table table-md">
		<thead></thead>
		<tbody id="geo-results-container" class="p-2">
			for _, loc := range localizations {
				<tr
					data-location={ fmt.Sprintf("{\"lat\": %f, \"lon\": %f, \"formatted\": \"%s\"}", loc.Lat, loc.Lon, loc.Formatted) }
					onclick="handleLocationSelect(JSON.parse(this.dataset.location))"
				>
					<td>
						<div>{ loc.Formatted }</div>
					</td>
				</tr>
			}
		</tbody>
		<tfoot></tfoot>
	</table>
}
